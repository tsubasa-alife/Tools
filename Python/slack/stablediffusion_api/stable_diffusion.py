import argparse
import random
import os
import datetime
from slack_sdk import WebClient
import torch
from diffusers import StableDiffusionPipeline

def main():
	parser = argparse.ArgumentParser(description="stable diffusionによるテキストからの画像生成")
	parser.add_argument("prompt",help="指示文")
	parser.add_argument("--seed",help="seed値")
	parser.add_argument("--waifu",help="日本のアニメ調にするかどうか",action="store_true")
	parser.add_argument("--upload",help="slackにアップロードするかどうか",action="store_true")

	args = parser.parse_args()

	date = datetime.datetime.now().strftime('%Y%m%d%H%M')

	device = "mps"
	seed = 1

	#引数でseedが指定されている場合はそれを利用する
	if(args.seed != None):
		seed = int(args.seed)
	else:
		seed = random.randint(1,10000)

	print(seed)

	torch.manual_seed(seed)

	model_id = "CompVis/stable-diffusion-v1-4"

	#日本のアニメ調の画像を生成する
	if(args.waifu):
		model_id = "hakurei/waifu-diffusion"


	prompt = args.prompt

	MY_TOKEN = os.environ["STABLE_DIFFUSION_TOKEN"]

	pipe = StableDiffusionPipeline.from_pretrained(model_id, use_auth_token=MY_TOKEN).to(device)

	image = pipe(prompt)["sample"][0]

	filepath = f"results/{date}_seed_{seed}.jpeg"
	image.save(filepath)

	#slackへのアップロード
	if(args.upload):
		print("slackへアップロードします")
		client = WebClient(os.environ["SLACK_BOT_TOKEN"])
		auth_test = client.auth_test()

		upload_file = client.files_upload(
			channels="#stable-diffusion",
			file=filepath,
			initial_comment="Images generated by stable-diffusion"
		)


if __name__ == "__main__":
	main()
